---
title: "mecRecordLinkage"
author: "≈Åukasz Chrostowski"
format: 
  html:
    self-contained: true
    table-of-contents: true
    number-sections: true
editor: visual
execute: 
  eval: true
  warning: false
  message: false
---

## Technical details

With record linkage we try to link two or more data sets using many common entities. The goal is to find the true matches among all possible pairs of the two data files. For this purposes we create so called `comparison space` $\Omega=A \times B=M \cup U$ consist of matches M and non-matches U between the record in given files. First of all we want to estimate probability ratio $$
r_{a b}=\frac{m\left(\gamma\right)}{u\left(\gamma\right)}
$$ where $m\left(\gamma\right)$ and $u\left(\gamma\right)$ are the probability mass functions for M and U set directly. In maximim entropy classification we classifier each pair of records to these sets depending of the $r$ value. We consider several ways to estimate probability ratio. Let $\quad g_{a b}=1 \quad$ if $\quad(a, b) \in M \quad$ and $\quad 0 \quad$ if $\quad(a, b) \in U$. In the first setting we can create a model of $m\left(\gamma\right)$ by $m(\gamma ; \boldsymbol{\theta})=\prod_{k=1}^K \theta_k^{\gamma_k}\left(1-\theta_k\right)^{1-\gamma_k}$. where $\theta_k=\operatorname{Pr}\left(\gamma_{a b, k}=1 \mid g_{a b}=1\right)$, and $\gamma_{a b, k}$ is the $k^{\text {th }}$ component of $\gamma_{a b}$. $u(\gamma ; \xi)$ can be modeled as above with parameters $\xi_k$ instead of $\theta_k$, where $\xi_k=\operatorname{Pr}\left(\gamma_{a b, k}=1 \mid g_{a b}=0\right)$.

## Package installation and loading

In order to use `mecRecordLinkage` package effectively there is no need to install or load additional packages. All functionalities are build in. To prepare datasets properly using`reclin2` packages is proposed inside of the `mecRecordLinkage`.

```{r setup, echo=FALSE}
install.packages("mecRecordLinkage")
library(mecRecordLinkage)
library(dplyr)
library(reclin)
```

## Work with example datasets and initial exploration

To perform example of using `mec` function we can use following data sets. Data are obtained from https://github.com/djvanderlaan/tutorial-reclin-uros2021 and contain columns with the most important attributes like first name, last name or sex related to a given person (for more see documentation).

```{r}
data1 <- read.csv("data/example1.csv", stringsAsFactors = FALSE)
data2 <- read.csv("data/example2.csv", stringsAsFactors = FALSE)
head(data1)
head(data2)
```

The goal of the main function `mec` available in the package is to link these sets using maximum entropy classifier. Combining different sources of data is widely using step in order to make an data analysis. Many various technics have been considering during the years so as to link the records base on a comparison vectors and calculates m- and u- probabilities. The most useful is probablistic record linkage derived by `Fellegi and Sunter`, where parameters are estimated using `EM` algorithm (`Winkler`) (see `reclin` package). One can use also machine learning methods, where problem of matching pairs of records into match and non-match sets is considering as a classification problem. Using `glm` with `binomial` or `xboost` is one of the proposed methods. Here matching pairs is a classification problem as well, but matching process is more automated in comparison to probablistic method. MEC technic was proposed by D. Lee, L. C. Zhang and J. K. Kim "Maximum entropy classification for record linkage" (2022). Authors derive supervised and unsupervised methods with full set parameters estimation techniques. `mecRecordLinkage` package contains direct implementation of the proposed algorithms. First of all record linkage using `mec` depending on the estimation techniques will be performed. Then we compare results with the `reclin` package. In contrast to `reclin` package, there is one function to prepare datasets, create comparison vectors using `reclin` package, obtain paramters and link record.

## Unsupervised learning

One can divide maximum entropy classification into two methods of machine learning - supervised and unsupervised learning. The second technic provides iterative algorithm to obtain terminal result. `mec` Function enables to use unsupervised learning. In the first case we link datasets on given variables assuming that year of birthday given person is strata.

```{r}
vars <- c("firstname", "lastname", "sex", "dobday", "dobmon")
model <- mec(A = data1, B = data2, vars = vars, blockvars = "dobyear")
```

Let's look at the return of the model.

Parameters of the model

```{r}
model$theta # for m-probability
model$eta # for u-probability
model$matching_prob # Expected value of being in the M set
model$class_entropy # value of the entropy function for the final result
```

Model returns M set, its size and linked datasets as well.

```{r}
model$M # M set
nrow(model$M)
model$linked_data
nrow(model$linked_data) # size of the final dataset
```

Depending on the estimation method, results can be different. You can define that by yourself for with the `control` parameter.

```{r}
model2 <- mec(A = data1, B = data2, vars = vars, blockvars = "dobyear", control = control_mec(theta_est = "2"))
```

## Guiding the algorithm by the error rates

```{r}
model_ER <- mec(A = data1, B = data2, vars = vars, blockvars = "dobyear", error_rate = TRUE)
```

Let's compare it to the results for `reclin` package, where `EM` algorithm is implemented.

```{r}
pairs <- reclin2::pair_blocking(data1, data2, on = "dobyear")
reclin2::compare_pairs(pairs, on = vars, inplace = TRUE)
m <- reclin2::problink_em(~lastname + firstname + 
                            sex + dobday + dobmon, data = pairs)

pairs$weights <- predict(m, pairs = pairs, add = TRUE)

pairs <- reclin2::select_threshold(pairs, "threshold", score = "weights", 
                                   threshold = 8)
pairs <- reclin2::select_n_to_m(pairs, "weights", variable = "ntom", 
                                threshold = 0)

linked_data_set <- reclin2::link(pairs, selection = "ntom", all = FALSE)
nrow(linked_data_set)
  
```

Notice that this method requires defining threshold by the user, while in maximal MEC there is no need to define that, what makes this method more automated.

## Supervised learning
